{
    "mcpServers": {
        "render": {
            "url": "https://mcp.render.com/mcp",
            "headers": {
                "Authorization": "Bearer rnd_z7FkaX9G21FL5j0Nk2JLf1qrVNSX"
            }
        },
        "ai-agent-project": {
            "command": "node",
            "args": [
                "mcp-server.js"
            ],
            "cwd": ".",
            "env": {
                "NODE_ENV": "development"
            }
        },
        "python-services": {
            "command": "python",
            "args": [
                "-m",
                "mcp_server"
            ],
            "cwd": "./python-services",
            "env": {
                "PYTHONPATH": "./python-services"
            }
        },
        "backend-api": {
            "command": "node",
            "args": [
                "src/mcp-server.js"
            ],
            "cwd": "./backend",
            "env": {
                "NODE_ENV": "development",
                "PORT": "5000"
            }
        }
    },
    "tools": {
        "avatar-generation": {
            "description": "Generate 3D avatars from photos or text descriptions",
            "server": "ai-agent-project",
            "capabilities": [
                "photo-to-avatar",
                "text-to-avatar",
                "avatar-customization"
            ]
        },
        "hebrew-tts": {
            "description": "Convert Hebrew text to speech using Coqui TTS or Piper TTS",
            "server": "python-services",
            "capabilities": [
                "text-to-speech",
                "hebrew-support",
                "voice-selection"
            ]
        },
        "lip-sync": {
            "description": "Generate lip-synced video from audio and avatar",
            "server": "python-services",
            "capabilities": [
                "wav2lip",
                "real-time-streaming",
                "video-generation"
            ]
        },
        "conversation": {
            "description": "Handle AI conversations with Ollama LLM and RAG knowledge base",
            "server": "backend-api",
            "capabilities": [
                "llm-chat",
                "knowledge-retrieval",
                "intent-detection"
            ]
        },
        "lead-management": {
            "description": "Capture and manage leads from agent conversations",
            "server": "backend-api",
            "capabilities": [
                "lead-capture",
                "contact-storage",
                "lead-tracking"
            ]
        },
        "appointment-scheduling": {
            "description": "Schedule and manage appointments through the agent",
            "server": "backend-api",
            "capabilities": [
                "calendar-integration",
                "appointment-booking",
                "reminders"
            ]
        }
    },
    "contexts": {
        "ai-agent-development": {
            "description": "Full-stack AI Agent application development context",
            "includes": [
                "frontend/src/**/*",
                "backend/src/**/*",
                "python-services/**/*",
                "*.json",
                "*.md",
                "*.yml",
                "*.yaml"
            ],
            "excludes": [
                "node_modules/**/*",
                "dist/**/*",
                "build/**/*",
                "__pycache__/**/*",
                "*.pyc",
                "uploads/**/*",
                "temp/**/*"
            ]
        },
        "frontend-development": {
            "description": "React frontend development context",
            "includes": [
                "frontend/src/**/*",
                "frontend/package.json",
                "frontend/vite.config.js",
                "frontend/tailwind.config.js"
            ]
        },
        "backend-development": {
            "description": "Node.js backend API development context",
            "includes": [
                "backend/src/**/*",
                "backend/package.json",
                "backend/Dockerfile"
            ]
        },
        "python-services": {
            "description": "Python microservices development context",
            "includes": [
                "python-services/**/*",
                "python-services/requirements.txt"
            ]
        }
    },
    "settings": {
        "autoComplete": true,
        "suggestions": true,
        "errorHighlighting": true,
        "codeActions": true,
        "formatting": true,
        "linting": true
    },
    "extensions": {
        "recommended": [
            "ms-python.python",
            "ms-vscode.vscode-typescript-next",
            "bradlc.vscode-tailwindcss",
            "esbenp.prettier-vscode",
            "ms-vscode.vscode-json",
            "ms-vscode.vscode-yaml"
        ]
    }
}